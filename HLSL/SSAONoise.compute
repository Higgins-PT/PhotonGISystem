#pragma kernel SpawnNoise
RWTexture3D<float4> _Result;
Texture2D<float4> _NoiseTex;
float _ResultSize_X;
float _ResultSize_Y;
float _NoiseSize_X;
float _NoiseSize_Y;
float _Sigma;
float3 GetNoise(float2 uv)
{
    uv = frac(uv);
    return _NoiseTex[(int2) (uv * float2(_NoiseSize_X, _NoiseSize_Y))].xyz + float3(0, uv);

}

inline float Random(float3 seed)
{
    return frac(sin(dot(seed, float3(12.9898, 78.233, 45.164))) * 43758.5453);
}
float3 GenerateNormalDistribution(float3 seed, float sigma)
{
    float u1 = max(Random(seed), 1e-4);
    float u2 = saturate(Random(seed + 1.0));
    float u3 = saturate(Random(seed + 2.0));


    float r = sqrt(-2.0 * log(u1)) * sigma;
    float theta = 2.0 * 3.14159265359 * u2;
    float phi = acos(2.0 * u3 - 1.0);

    float3 pointE;
    pointE.x = r * sin(phi) * cos(theta);
    
    pointE.y = r * sin(phi) * sin(theta);
    
    pointE.z = r * cos(phi);
    

    return pointE;
}

[numthreads(8, 8, 1)]
void SpawnNoise(uint3 id : SV_DispatchThreadID)
{
    float level = (float) id.z;
    float2 uv = (float2) id.xy / float2(_ResultSize_X, _ResultSize_Y);
    float3 seed = GetNoise(uv * (level + 1) * 10 + uv).xyz;
    seed.z = seed.x + seed.y;

    float4 noise = float4(GenerateNormalDistribution(seed, _Sigma), 0);
    _Result[id.xyz] = noise;
}